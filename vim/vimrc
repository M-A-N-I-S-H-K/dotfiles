" Mostly stolen from Yan Pritzer's most excellent Yadr (github.com/skwp/dotfiles)

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" ================ General Config ====================
"
"
set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000                "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
set showmode                    "Show current mode down the bottom
set gcr=a:blinkon0              "Disable cursor blink
set visualbell                  "No sounds
set autoread                    "Reload files changed outside vim

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

"turn on syntax highlighting
syntax on

" The mapleader has to be set before vundle starts loading all
" the plugins.
let mapleader = "\<Space>"
nmap <Leader>rxm :ExtractMethod<Enter>

" Copy the relative path of the current file to the clipboard
nmap <Leader>cf :silent !echo -n % \| pbcopy<Enter>

" ================ Turn Off Swap Files ==============

set noswapfile
set nobackup
set nowb

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" ================ Indentation ======================

set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>

filetype off
" Install Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Cool plugins
Bundle 'scrooloose/nerdtree'
Bundle 'Xuyuanp/nerdtree-git-plugin'
Bundle 'ctrlpvim/ctrlp.vim'
Bundle 'Shougo/neocomplete.vim'
Bundle 'tommcdo/vim-exchange.git'
Bundle 'ntpeters/vim-better-whitespace'
Bundle 'tpope/vim-surround'
Bundle 'jiangmiao/auto-pairs'
Bundle 'scrooloose/syntastic'
Bundle 'vim-scripts/CursorLineCurrentWindow'
Bundle 'victormours/better-writing.vim'
Bundle 'janko-m/vim-test'

" Git
Bundle 'tpope/vim-fugitive'

" Visuals
Bundle 'altercation/vim-colors-solarized'

" Commenting
Bundle "tomtom/tlib_vim.git"
Bundle "tomtom/tcomment_vim.git"

" HTML
Bundle 'mattn/emmet-vim'
Bundle 'slim-template/vim-slim'

" Javascript
Bundle "othree/yajs.vim"
Bundle "othree/javascript-libraries-syntax.vim"
Bundle 'claco/jasmine.vim'
Bundle 'kchmck/vim-coffee-script'

" Ruby
Bundle 'Keithbsmiley/rspec.vim'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-endwise'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'emilsoman/spec-outline.vim'
Bundle 'victormours/vim-rspec'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'kana/vim-textobj-user'
Bundle 'jgdavey/vim-blockle'

" Elixir
Bundle 'elixir-lang/vim-elixir'


call vundle#end()            " required
filetype plugin indent on    " required

syntax enable

" Solarized theme
let g:solarized_termtrans = 1
set background=light
colorscheme solarized

if has("gui_running")
"tell the term has 256 colors
  set t_Co=256
end

source ~/.dotfiles/vim/splits.vim
source ~/.dotfiles/vim/tabs.vim
source ~/.dotfiles/vim/font.vim
source ~/.dotfiles/vim/ruby.vim

source ~/.dotfiles/vim/plugins/emmet-vim.vim
source ~/.dotfiles/vim/plugins/neocomplete.vim
source ~/.dotfiles/vim/plugins/nerdtree.vim
source ~/.dotfiles/vim/plugins/ctrlp.vim
source ~/.dotfiles/vim/plugins/tcomment.vim
source ~/.dotfiles/vim/plugins/spec-outline.vim
source ~/.dotfiles/vim/plugins/vim-rspec.vim
source ~/.dotfiles/vim/plugins/vim-textobj-rubyblock.vim
source ~/.dotfiles/vim/plugins/vim-better-whitespace.vim
source ~/.dotfiles/vim/plugins/syntastic.vim
source ~/.dotfiles/vim/plugins/vim-fugitive.vim

" Better search
set hlsearch
set incsearch

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s --ignore app/assets/ -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" grep word under cursor
nnoremap <Leader>g :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points

" Move normally between wrapped lines
nmap j gj
nmap k gk

autocmd BufReadPre,FileReadPre *.md :set wrap

" always show status line
set laststatus=2

" Enable filetype plugins for vim-textobj-rubyblock
if has("autocmd")
  filetype indent plugin on
endif

nnoremap ; :

autocmd FocusLost * silent! wa " Automatically save file

set scrolloff=5 " Keep 5 lines below and above the cursor

set cursorline

set laststatus=2
set statusline=%f "tail of the filename
set statusline+=\ c:%c

nnoremap <Leader>a :w<Enter>:!osascript -e 'tell application "Iterm" to activate' -e 'tell application "System Events" to keystroke (ASCII character 30) ' -e 'tell application "System Events" to keystroke return'<Enter>

autocmd VimResized * wincmd = " Automatically resize splits when resizing window

" relativenumber line number
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
    set number
  else
    set relativenumber
  endif
endfunc

nnoremap <C-b> :call NumberToggle()<CR>

"lazy js. Append ; at the end of the line
nnoremap <Leader>; m`A;<Esc>``

nnoremap H ^
nnoremap L $

if has("gui_running")
  set fullscreen
end

